# The way this works is a little weird. But basically, the create-release job
# runs purely to initialize the GitHub release itself. Once done, the upload
# URL of the release is saved as an artifact.
#
# The build-release job runs only once create-release is finished. It gets the
# release upload URL by downloading the corresponding artifact. It then builds
# the release executables for each supported platform and attaches them as
# release assets to the previously created release.
#
# The key here is that we create the release only once.

name: release
on:
  push:
    # Enable when testing release infrastructure on a branch.
    # branches:
    # - ag/rollup
    tags:
    - 'szip-[0-9]+.[0-9]+.[0-9]+'
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    env:
      # Set to force version number, e.g., when no tag exists.
      # SZIP_VERSION: 4.5.6
    steps:
      - name: Create artifacts directory
        run: mkdir artifacts

      - name: Get the release version from the tag
        if: env.SZIP_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "::set-output name=SZIP_VERSION::${GITHUB_REF#refs/tags/szip-}"
          echo "version is: ${{ env.SZIP_VERSION }}"

      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: szip-${{ env.SZIP_VERSION }}
          release_name: szip ${{ env.SZIP_VERSION }}

      - name: Save release upload URL to artifact
        run: echo "${{ steps.release.outputs.upload_url }}" > artifacts/release-upload-url

      - name: Upload artifacts
        uses: actions/upload-artifact@v1
        with:
          name: artifacts
          path: artifacts

  build-release:
    name: build-release
    needs: ['create-release']
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
        - build: linux
          os: ubuntu-18.04
          rust: nightly
          target: x86_64-unknown-linux-musl
        - build: macos
          os: macos-latest
          rust: nightly
          target: x86_64-apple-darwin
        - build: windows
          os: windows-2019
          rust: nightly
          target: x86_64-pc-windows-msvc

    steps:
    - name: Checkout repository
      uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        profile: minimal
        override: true
        target: ${{ matrix.target }}

    - name: Set TARGET flags
      run: echo "::set-env name=TARGET_FLAGS::--target ${{ matrix.target }}"

    - name: Get release download URL
      uses: actions/download-artifact@v1
      with:
        name: artifacts
        path: artifacts

    - name: Set release upload URL
      shell: bash
      run: |
        release_upload_url="$(cat artifacts/release-upload-url)"
        echo "::set-env name=RELEASE_UPLOAD_URL::$release_upload_url"
        echo "release upload url: $RELEASE_UPLOAD_URL"

    - name: Build release binary
      run: cargo build --manifest-path szip/Cargo.toml --verbose --release ${{ env.TARGET_FLAGS }}

    - name: Strip release binary (linux and macos)
      if: matrix.build == 'linux' || matrix.build == 'macos'
      run: strip "target/${{ matrix.target }}/release/szip"

    - name: Build archive
      shell: bash
      run: |
        staging="szip-${{ matrix.target }}"
        mkdir "$staging"
        cp {szip/README.md,szip/COPYING} "$staging/"

        if [ "${{ matrix.build }}" = "windows" ]; then
          cp "target/${{ matrix.target }}/release/szip.exe" "$staging/"
          7z a "$staging.zip" "$staging"
          echo "::set-env name=ASSET::$staging.zip"
        else
          cp "target/${{ matrix.target }}/release/szip" "$staging/"
          tar czf "$staging.tar.gz" "$staging"
          echo "::set-env name=ASSET::$staging.tar.gz"
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ env.RELEASE_UPLOAD_URL }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream
